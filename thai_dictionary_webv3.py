import streamlit as st
import json
import os
import hashlib
import smtplib
import random
import base64
import uuid
from io import BytesIO
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from deep_translator import GoogleTranslator
import wikipedia
from gtts import gTTS

# === CONFIG ===
WIKI_LANG = 'th'
wikipedia.set_lang(WIKI_LANG)
MEMORY_FILE = 'thai_dict_memory.json'
USER_FILE = 'users.json'
OTP_STORE = {}
EMAIL = "guzz9777@gmail.com"  # ‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
APP_PASSWORD = "pqgo hjcx dbqm pjsk"  # ‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ

# === MEMORY ===
def load_memory():
    if os.path.exists(MEMORY_FILE):
        with open(MEMORY_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_memory(mem):
    with open(MEMORY_FILE, "w", encoding="utf-8") as f:
        json.dump(mem, f, ensure_ascii=False, indent=2)

# === USER ===
def load_users():
    if os.path.exists(USER_FILE):
        with open(USER_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_users(users):
    with open(USER_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

# === PASSWORD ===
def hash_password(pwd):
    return hashlib.sha256(pwd.encode()).hexdigest()

# === SEND OTP ===
def send_otp(email, otp):
    try:
        msg = MIMEMultipart()
        msg['From'] = EMAIL
        msg['To'] = email
        msg['Subject'] = "Your OTP Verification Code"
        msg.attach(MIMEText(f"Your OTP code is: {otp}", 'plain'))
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
            server.login(EMAIL, APP_PASSWORD)
            server.send_message(msg)
        return True
    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• OTP ‡πÑ‡∏î‡πâ: {e}")
        return False

# === TEXT TO SPEECH ===
def text_to_speech(text, lang='th', slow=False):
    try:
        mp3_fp = BytesIO()
        tts = gTTS(text=text, lang=lang, slow=slow)
        tts.write_to_fp(mp3_fp)
        mp3_fp.seek(0)
        b64 = base64.b64encode(mp3_fp.read()).decode()
        unique_id = uuid.uuid4()
        return f'<audio controls key="{unique_id}"><source src="data:audio/mp3;base64,{b64}" type="audio/mp3"></audio>'
    except:
        return None

# === INIT SESSION ===
if "page" not in st.session_state:
    st.session_state.page = "login"
if "user" not in st.session_state:
    st.session_state.user = ""
if "users" not in st.session_state:
    st.session_state.users = load_users()
if "memory" not in st.session_state:
    st.session_state.memory = load_memory()

# === UI STYLES ===
st.markdown("""
    <style>
    .stTextInput>div>div>input {
        background-color: #f0f0f0;
        color: black;
        border-radius: 8px;
        padding: 8px;
        border: 1px solid #ccc;
    }
    .stButton>button {
        background-color: #0066cc;
        color: white;
        border-radius: 6px;
        padding: 8px 16px;
        border: none;
    }
    </style>
""", unsafe_allow_html=True)

# === LOGIN ===
def login_page():
    st.title("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    username = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
    if st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
        if username in st.session_state.users:
            if st.session_state.users[username]["password"] == hash_password(password):
                st.session_state.user = username
                st.session_state.page = "main"
            else:
                st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        else:
            st.error("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ")
    if st.button("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"):
        st.session_state.page = "register"

# === REGISTER ===
def register_page():
    st.title("üìù ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")
    new_user = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà")
    new_email = st.text_input("‡∏≠‡∏µ‡πÄ‡∏°‡∏• (@gmail ‡∏´‡∏£‡∏∑‡∏≠ @email)")
    new_pass = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
    confirm_pass = st.text_input("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")

    if st.button("‡∏™‡πà‡∏á OTP"):
        if "@gmail" in new_email or "@email" in new_email:
            if new_pass == confirm_pass and new_user:
                otp = str(random.randint(100000, 999999))
                OTP_STORE[new_email] = {"otp": otp, "user": new_user, "pass": hash_password(new_pass)}
                if send_otp(new_email, otp):
                    st.success("‡∏™‡πà‡∏á OTP ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
            else:
                st.error("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
        else:
            st.error("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ @gmail ‡∏´‡∏£‡∏∑‡∏≠ @email")

    otp_input = st.text_input("‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ OTP")
    if st.button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP"):
        for email, data in OTP_STORE.items():
            if data["otp"] == otp_input:
                st.session_state.users[data["user"]] = {"password": data["pass"]}
                save_users(st.session_state.users)
                st.success("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
                st.session_state.page = "login"
                return
        st.error("OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

# === LOGOUT ===
def logout():
    st.session_state.user = ""
    st.session_state.page = "login"

# === DICTIONARY ===
def dictionary_app():
    st.title("üìò ‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏° AI")

    col1, col2, col3 = st.columns([2, 2, 1])
    with col1:
        query = st.text_input("üîç ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:").strip().lower()
    with col2:
        language = st.radio("üåè ‡∏†‡∏≤‡∏©‡∏≤:", ["‡πÑ‡∏ó‡∏¢ ‚Üí ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©", "‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‚Üí ‡πÑ‡∏ó‡∏¢"])
    with col3:
        if st.button("üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"):
            logout()

    if query:
        direction = "th_to_en" if language == "‡πÑ‡∏ó‡∏¢ ‚Üí ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©" else "en_to_th"
        lang_code = 'th' if direction == "th_to_en" else 'en'

        st.subheader("üîÅ Google Translate")
        result = GoogleTranslator(source='th' if direction=="th_to_en" else 'en',
                                  target='en' if direction=="th_to_en" else 'th').translate(query)
        st.write(f"‚û°Ô∏è {result}")

        audio = text_to_speech(query, lang=lang_code)
        if audio:
            st.markdown("üîä ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô:")
            st.markdown(audio, unsafe_allow_html=True)

        st.subheader("üìö Wikipedia")
        try:
            summary = wikipedia.summary(query, sentences=2)
            st.info(summary)
        except:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Wikipedia")

        st.subheader("‚úçÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        new_desc = st.text_input("üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢")
        if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"):
            if query not in st.session_state.memory:
                st.session_state.memory[query] = []
            st.session_state.memory[query].append({"name": st.session_state.user, "desc": new_desc})
            save_memory(st.session_state.memory)
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß")

        if query in st.session_state.memory:
            st.subheader("üìã ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
            for i, item in enumerate(st.session_state.memory[query]):
                st.markdown(f"{i+1}. **{item['name']}**: {item['desc']}")
                if item['name'] == st.session_state.user:
                    if st.button(f"üóëÔ∏è ‡∏•‡∏ö ({i+1})", key=f"del_{i}"):
                        st.session_state.memory[query].pop(i)
                        if not st.session_state.memory[query]:
                            del st.session_state.memory[query]
                        save_memory(st.session_state.memory)
                        st.warning("‚ùå ‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                        break

    st.markdown("---")
    st.caption("üë®‚Äçüíª ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏ó‡∏≥: FOxDoryu")
    st.caption("ü§ñ Powered by ChatGPT + Streamlit")

# === ROUTING ===
if st.session_state.page == "login":
    login_page()
elif st.session_state.page == "register":
    register_page()
elif st.session_state.page == "main":
    dictionary_app()
