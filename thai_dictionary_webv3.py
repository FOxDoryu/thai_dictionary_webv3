import streamlit as st
import json
import os
import hashlib
import smtplib
import random
import re
import base64
import uuid
from io import BytesIO
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from deep_translator import GoogleTranslator
import wikipedia
from gtts import gTTS

# CONFIG
WIKI_LANG = 'th'
wikipedia.set_lang(WIKI_LANG)
MEMORY_FILE = 'thai_dict_memory.json'
EMAIL_ADDRESS = "your_email@gmail.com"  # ‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
EMAIL_PASSWORD = "your_app_password"  # ‡πÉ‡∏ä‡πâ App Password ‡∏à‡∏≤‡∏Å Gmail

# MEMORY

def load_memory():
    if os.path.exists(MEMORY_FILE):
        with open(MEMORY_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_memory(mem):
    with open(MEMORY_FILE, "w", encoding="utf-8") as f:
        json.dump(mem, f, ensure_ascii=False, indent=2)

memory = load_memory()

# SESSION INIT
if "users" not in st.session_state:
    st.session_state.users = {
        "admin": {"password": hashlib.sha256("1234".encode()).hexdigest()}
    }
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
if "user" not in st.session_state:
    st.session_state.user = ""
if "new_desc" not in st.session_state:
    st.session_state.new_desc = ""
if "registering" not in st.session_state:
    st.session_state.registering = False
if "otp_sent" not in st.session_state:
    st.session_state.otp_sent = False
if "otp_code" not in st.session_state:
    st.session_state.otp_code = ""
if "register_info" not in st.session_state:
    st.session_state.register_info = {}

# UTILS

def hash_password(pwd):
    return hashlib.sha256(pwd.encode()).hexdigest()

def send_otp_email(receiver_email, otp_code):
    try:
        msg = MIMEMultipart()
        msg["From"] = EMAIL_ADDRESS
        msg["To"] = receiver_email
        msg["Subject"] = "OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"
        body = f"‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: {otp_code}"
        msg.attach(MIMEText(body, "plain"))

        server = smtplib.SMTP("smtp.gmail.com", 587)
        server.starttls()
        server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
        server.send_message(msg)
        server.quit()
        return True
    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• OTP ‡πÑ‡∏î‡πâ: {e}")
        return False

def text_to_speech(text, lang='th', slow=False):
    try:
        mp3_fp = BytesIO()
        tts = gTTS(text=text, lang=lang, slow=slow)
        tts.write_to_fp(mp3_fp)
        mp3_fp.seek(0)
        b64 = base64.b64encode(mp3_fp.read()).decode()
        unique_id = uuid.uuid4()
        return f'<audio controls key="{unique_id}"><source src="data:audio/mp3;base64,{b64}" type="audio/mp3"></audio>'
    except:
        return None

# UI STYLES
st.markdown("""
<style>
.stTextInput>div>div>input {
    background-color: #f0f0f0;
    color: black;
    border-radius: 8px;
    padding: 8px;
    border: 1px solid #ccc;
}
.stButton>button {
    background-color: #0066cc;
    color: white;
    border-radius: 6px;
    padding: 8px 16px;
    border: none;
}
</style>
""", unsafe_allow_html=True)

# LOGIN PAGE

def login_page():
    st.title("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    username = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")

    col1, col2 = st.columns(2)
    with col1:
        if st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
            if username in st.session_state.users and \
               st.session_state.users[username]["password"] == hash_password(password):
                st.session_state.logged_in = True
                st.session_state.user = username
                st.experimental_rerun()
            else:
                st.error("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    with col2:
        if st.button("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"):
            st.session_state.registering = True
            st.experimental_rerun()

# REGISTER PAGE

def register_page():
    st.title("üìù ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà")
    name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    email = st.text_input("‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢ .gmail.com ‡∏´‡∏£‡∏∑‡∏≠ .email.com)")
    password1 = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
    password2 = st.text_input("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")

    def valid_email(e): return bool(re.match(r"[^@]+@(?:gmail\.com|email\.com)$", e.lower()))

    if st.button("‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™ OTP"):
        if not name.strip():
            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        elif not valid_email(email):
            st.error("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ gmail.com ‡∏´‡∏£‡∏∑‡∏≠ email.com")
        elif password1 != password2:
            st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
        elif name in st.session_state.users:
            st.error("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
        else:
            otp = f"{random.randint(100000, 999999)}"
            st.session_state.otp_code = otp
            st.session_state.register_info = {
                "name": name, "email": email, "password": hash_password(password1)
            }
            if send_otp_email(email, otp):
                st.session_state.otp_sent = True
                st.success("‡∏™‡πà‡∏á OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

    if st.session_state.otp_sent:
        user_otp = st.text_input("‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ OTP")
        if st.button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP"):
            if user_otp == st.session_state.otp_code:
                info = st.session_state.register_info
                st.session_state.users[info["name"]] = {
                    "password": info["password"], "email": info["email"]
                }
                st.success("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
                st.session_state.registering = False
                st.session_state.otp_sent = False
                st.experimental_rerun()
            else:
                st.error("OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

    if st.button("üîô ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
        st.session_state.registering = False
        st.experimental_rerun()

# LOGOUT

def logout():
    st.session_state.logged_in = False
    st.session_state.user = ""
    st.session_state.new_desc = ""
    st.experimental_rerun()

# MAIN DICTIONARY APP

def dictionary_app():
    st.title("üìò ‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏° AI")

    col1, col2, col3 = st.columns([2, 2, 1])
    with col1:
        query = st.text_input("üîç ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:").strip().lower()
    with col2:
        language = st.radio("üåè ‡∏†‡∏≤‡∏©‡∏≤:", ["‡πÑ‡∏ó‡∏¢ ‚Üí ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©", "‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‚Üí ‡πÑ‡∏ó‡∏¢"])
    with col3:
        if st.button("üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"):
            logout()

    if query:
        direction = "th_to_en" if language == "‡πÑ‡∏ó‡∏¢ ‚Üí ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©" else "en_to_th"
        lang_code = 'th' if direction == "th_to_en" else 'en'

        st.subheader("üîÅ ‡∏ú‡∏•‡∏à‡∏≤‡∏Å Google Translate")
        result = GoogleTranslator(source='th' if direction == "th_to_en" else 'en',
                                  target='en' if direction == "th_to_en" else 'th').translate(query)
        st.write(f"‚û°Ô∏è {result}")
        reverse = GoogleTranslator(source='en' if direction == "th_to_en" else 'th',
                                   target='th' if direction == "th_to_en" else 'en').translate(result)
        st.write(f"üîÑ ‡πÅ‡∏õ‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö: {reverse}")

        audio = text_to_speech(query, lang=lang_code)
        if audio:
            st.markdown("üîä ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô:")
            st.markdown(audio, unsafe_allow_html=True)

        st.subheader("üìö ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏≤‡∏Å Wikipedia")
        try:
            summary = wikipedia.summary(query, sentences=2)
            st.info(summary)
            audio_summary = text_to_speech(summary, lang=lang_code)
            if audio_summary:
                st.markdown("üîä ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢:")
                st.markdown(audio_summary, unsafe_allow_html=True)
        except:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Wikipedia")

        st.subheader("‚úçÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        st.session_state.new_desc = st.text_input("üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢", value=st.session_state.new_desc)

        if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"):
            if st.session_state.new_desc.strip():
                if query not in memory:
                    memory[query] = []
                memory[query].append({
                    "name": st.session_state.user,
                    "desc": st.session_state.new_desc.strip()
                })
                save_memory(memory)
                st.session_state.new_desc = ""
                st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß")

        if query in memory:
            st.subheader("üìã ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
            for i, item in enumerate(memory[query]):
                st.markdown(f"{i+1}. **{item['name']}**: {item['desc']}")
                if item["name"] == st.session_state.user:
                    if st.button(f"üóëÔ∏è ‡∏•‡∏ö ({i+1})", key=f"delete_{i}"):
                        memory[query].pop(i)
                        if not memory[query]:
                            del memory[query]
                        save_memory(memory)
                        st.warning("‚ùå ‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                        break

    st.markdown("---")
    st.caption("üë®‚Äçüíª ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏ó‡∏≥: FOxDoryu")
    st.caption("ü§ñ Powered by ChatGPT + Streamlit")

# MAIN RUN
if __name__ == "__main__":
    if st.session_state.logged_in:
        dictionary_app()
    elif st.session_state.registering:
        register_page()
    else:
        login_page()
