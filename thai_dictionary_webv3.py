import streamlit as st
from deep_translator import GoogleTranslator
import wikipedia
import json
import os
from gtts import gTTS
import base64

# ====== CONFIG ======
WIKI_LANG = 'th'
wikipedia.set_lang(WIKI_LANG)
MEMORY_FILE = 'thai_dict_memory.json'

# ====== LOAD/SAVE ======
def load_memory():
    if os.path.exists(MEMORY_FILE):
        with open(MEMORY_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_memory(mem):
    with open(MEMORY_FILE, 'w', encoding='utf-8') as f:
        json.dump(mem, f, ensure_ascii=False, indent=2)

memory = load_memory()

# ====== FUNCTIONS ======
def translate_word(word, direction="th_to_en"):
    try:
        return GoogleTranslator(source='th' if direction == 'th_to_en' else 'en',
                                target='en' if direction == 'th_to_en' else 'th').translate(word)
    except:
        return "(‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡πÑ‡∏î‡πâ)"

def wikipedia_summary(word):
    try:
        return wikipedia.summary(word, sentences=2)
    except:
        return "(‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Wikipedia)"

def google_image(word):
    return f"https://www.google.com/search?tbm=isch&q={word}"

def text_to_speech(text, lang='th', slow=False):
    try:
        tts = gTTS(text=text, lang=lang, slow=slow)
        tts.save("temp.mp3")
        with open("temp.mp3", "rb") as f:
            audio_bytes = f.read()
        b64 = base64.b64encode(audio_bytes).decode()
        return f'<audio controls><source src="data:audio/mp3;base64,{b64}" type="audio/mp3"></audio>'
    except:
        return None

# ====== UI START ======
st.set_page_config(page_title="‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏° AI", layout="centered")
st.markdown("""
    <style>
    .stTextInput>div>div>input {
        background-color: #4a4a4a;
        color: white;
        border-radius: 5px;
        padding: 8px;
        border: none;
    }
    </style>
""", unsafe_allow_html=True)

st.title("üìò ‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏° AI ")

query = st.text_input("üîç ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:", "")
language = st.radio("üåè ‡∏†‡∏≤‡∏©‡∏≤:", ["‡πÑ‡∏ó‡∏¢ ‚Üí ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©", "‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‚Üí ‡πÑ‡∏ó‡∏¢"])

# ====== ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏õ‡∏• ‡πÅ‡∏•‡∏∞ Wiki ======
if query:
    direction = "th_to_en" if language == "‡πÑ‡∏ó‡∏¢ ‚Üí ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©" else "en_to_th"
    lang_code = 'th' if direction == "th_to_en" else 'en'

    with st.expander("üîÅ ‡∏ú‡∏•‡∏à‡∏≤‡∏Å Google Translate"):
        result = translate_word(query, direction=direction)
        st.write(f"**{query}** ‚û°Ô∏è **{result}**")
        reverse = translate_word(result, direction='en_to_th' if direction == 'th_to_en' else 'th_to_en')
        st.write(f"üîÑ ‡πÅ‡∏õ‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö: **{result}** ‚û°Ô∏è **{reverse}**")
        st.markdown("---")
        st.markdown("üîä ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡πà‡∏≤‡∏ô:")
        audio = text_to_speech(query, lang=lang_code)
        if audio:
            st.markdown(audio, unsafe_allow_html=True)

    with st.expander("üìö ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏≤‡∏Å Wikipedia"):
        summary = wikipedia_summary(query)
        st.write(summary)
        audio_summary = text_to_speech(summary, lang=lang_code)
        if audio_summary:
            st.markdown("üîä ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢:")
            st.markdown(audio_summary, unsafe_allow_html=True)

    with st.expander("üñºÔ∏è ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Google"):
        st.markdown(f"[üîó ‡∏î‡∏π‡∏†‡∏≤‡∏û]({google_image(query)})")

# ====== ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ ======
    st.markdown("---")
    st.subheader("‚úçÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    user_name = st.text_input("üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:", key="user_name")
    custom_note = st.text_input("üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:", key="custom_note")

    if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"):
        if not query or not user_name or not custom_note:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤, ‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
        else:
            if query not in memory:
                memory[query] = []
            memory[query].append({"name": user_name.strip(), "desc": custom_note.strip()})
            save_memory(memory)
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

# ====== ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏ö / ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ======
    if query and user_name and query in memory:
        own_entries = [item for item in memory[query] if item["name"] == user_name.strip()]
        if own_entries:
            st.markdown("---")
            st.subheader("üßπ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")

            for idx, item in enumerate(own_entries):
                col1, col2 = st.columns([5, 4])
                with col1:
                    st.markdown(f"**{idx+1}. {item['desc']}**")
                with col2:
                    if st.button(f"‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç {idx+1}", key=f"edit_{idx}"):
                        new_text = st.text_input("üîÅ ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà:", value=item["desc"], key=f"edit_text_{idx}")
                        if st.button(f"‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏Å‡πâ {idx+1}", key=f"confirm_edit_{idx}"):
                            memory[query][memory[query].index(item)]["desc"] = new_text.strip()
                            save_memory(memory)
                            st.success("üìù ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
                            st.experimental_rerun()

                    if st.button(f"üóëÔ∏è ‡∏•‡∏ö {idx+1}", key=f"delete_{idx}"):
                        confirm = st.radio("‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö:", ["‡πÑ‡∏°‡πà‡∏•‡∏ö", "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö"], key=f"confirm_delete_{idx}")
                        if confirm == "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö":
                            memory[query].remove(item)
                            if not memory[query]:
                                del memory[query]
                            save_memory(memory)
                            st.warning("‚ùå ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                            st.experimental_rerun()

# ====== ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ======
if query:
    st.markdown("---")
    st.subheader(f"üìÇ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö \"{query}\"")
    related = {k: v for k, v in memory.items() if query in k}
    if related:
        for word, notes in related.items():
            st.markdown(f"- **{word}**:")
            for i, note in enumerate(notes, 1):
                st.markdown(f"  {i}. {note['name']}: {note['desc']}")
    else:
        st.info("üîç ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á")

# ====== CREDIT ======
st.markdown("---")
st.caption("üë®‚Äçüíª ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏ó‡∏≥: [FOxDoryu]")
st.caption("ü§ñ AI ‡πÇ‡∏î‡∏¢ ChatGPT (OpenAI)")